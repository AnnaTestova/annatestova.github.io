import java.util.Scanner; 
import java.util.Random;
import java.lang.Thread;

public class Main {
    static final int FieldSize = 10;
    static char[][] ComputerField = new char[FieldSize][FieldSize];
    static char[][] gameComputerField = new char[FieldSize][FieldSize];
    static char[][] gamePersonField = new char[FieldSize][FieldSize];
    static Scanner scanner = new Scanner(System.in);
    static Random random = new Random();

    public static void main(String[] args) {
        System.out.println("Welcome to the Sea Battle game!");
        System.out.println("Player, please, input your name:");
        String playerName = scanner.nextLine();
        System.out.println("Nice to meet you, " + playerName + "!");
        Rules();

        Countdown();
        System.out.println("Hope you're ready!!");
        System.out.println("Now Computer will choose its ships...");

        InitializeField(ComputerField);
        InitializeField(gameComputerField);
        InitializeField(gamePersonField);
        placeShips(ComputerField);
        //to see the the field generated by Computer, just remove "//" from the next line
        //printField(ComputerField);
        System.out.println("Computer has finished placing ships:)");
        System.out.println("All preparations are over! Let's start!");
        playGame();
    }

    // Simple output of the game rules
    static void Rules() {
        System.out.println("Here are some rules:");
        System.out.println("1. The area of your field should be 10x10;");
        System.out.println("2. You should place 10 ships: one 4-square, two 3-square, three 2-square, and four 1-square ships;");
        System.out.println("3. Ships should not touch each other.");
        System.out.println("4. The field is 0-9, so left top value will be (0, 0)");
    }

    // 10 second countdown to give some time for a player to get ready for the game
    static void Countdown() {
      System.out.println("You will now have 10 seconds to draw your field:");
      try {
        for (int i = 10; i > 0; i--) {         
          Thread.sleep(1000);
          System.out.println(i);
       }
      }
      catch (Exception e) {   
        System.out.println(e);
      }
    }

    // Initializing game's field, filling the whole field with '.', showing free squares
    static void InitializeField(char[][] field) {
        for (int i = 0; i < FieldSize; i++) {
            for (int j = 0; j < FieldSize; j++) {
                field[i][j] = '.';
            }
        }
    }

    // Placing ships on the field
    static void placeShips(char[][] field) {
        placeShip(field, 4, 1);  // 1 4-deck ship
        placeShip(field, 3, 2);  // 2 3-deck ships
        placeShip(field, 2, 3);  // 3 2-deck ships
        placeShip(field, 1, 4);  // 4 1-deck ships
    }

    // Placing individual ships
    static void placeShip(char[][] field, int size, int count) {
        for (int i = 0; i < count; i++) {
            boolean placed = false;
            while (!placed) {
                int row = random.nextInt(FieldSize);
                int col = random.nextInt(FieldSize);
                boolean horizontal = random.nextBoolean();

                if (canPlaceShip(field, row, col, size, horizontal)) {
                    placeShipOnField(field, row, col, size, horizontal);
                    placed = true;
                }
            }
        }
    }

    // Checking if the ship can be placed
    static boolean canPlaceShip(char[][] field, int row, int col, int size, boolean horizontal) {
        for (int i = 0; i < size; i++) {
          int r, c;
          if (horizontal) {
            r = row + 0;
            c = col + i;
            } 
            else {
            r = row + i;
            c = col + 0;
          }
        
            if (r < 0 || r >= FieldSize || c < 0 || c >= FieldSize || field[r][c] != '.') { 
                return false;
            }

            if (!AreaClear(field, r, c)) {
                return false;
            }
        }
        return true;
    }

    // Check for neighbor ships
    static boolean AreaClear(char[][] field, int row, int col) {
        for (int i = -1; i <= 1; i++) {
            for (int j = -1; j <= 1; j++) {
                int r = row + i;
                int c = col + j;
                if (r >= 0 && r < FieldSize && c >= 0 && c < FieldSize && field[r][c] == 'X') {
                    return false;
                }
            }
        }
        return true;
    }

    // Placing the ship on the field, basicly changing "." to "X"
    static void placeShipOnField(char[][] field, int row, int col, int size, boolean horizontal) {
        for (int i = 0; i < size; i++) {
          int r, c;
          if (horizontal) {
            r = row + 0;
            c = col + i;
            } 
            else {
            r = row + i;
            c = col + 0;
          }
            field[r][c] = 'X';
        }
    }

    // Printing the game field
    static void printField(char[][] field) {
        System.out.println("Computer's field:");
        for (int i = 0; i < FieldSize; i++) {
            for (int j = 0; j < FieldSize; j++) {
                System.out.print(field[i][j] + " ");
            }
            System.out.println();
        }
    }

    static void playGame() {
      while (true) {
          System.out.println("Your turn!");
          printField(gameComputerField);
          playerMove();
          if (countHits(gameComputerField) >= 20) {
              System.out.println("Person won!");
              break;
          }
          System.out.println("Computer's turn!");
          printField(gamePersonField);
          computerMove();
          if (countHits(gamePersonField) >= 20) {
              System.out.println("Computer won!");
              break;
          }
      }
  }

  static void playerMove() {
      while (true) {
          System.out.print("Enter your shot (row and col): ");
          int row = scanner.nextInt();
          int col = scanner.nextInt();
          if (validShot(gameComputerField, row, col)) {
              if (ComputerField[row][col] == 'X') {
                  System.out.println("Hit!");
                  gameComputerField[row][col] = 'X';
                  if (ShipSunk(ComputerField, gameComputerField, row, col)) {
                      System.out.println("Ship sunk!");
                  }
              } else {
                  System.out.println("Miss!");
                  gameComputerField[row][col] = '*';
                  break;
              }
          } else {
              System.out.println("Invalid shot. Please,try again");
          }
      }
  }
  //randomply selecting 2 variables, waiting for Person's input, analizing input and making changes in the gamePersonField
  static void computerMove() {
    while (true) {
        int row = random.nextInt(FieldSize);
        int col = random.nextInt(FieldSize);
        if (validShot(gamePersonField, row, col)) {
            System.out.println("Computer shot at: (" + row + ", " + col + ")");
            System.out.print("Enter the result 'miss' / 'hit' / 'sunk': ");
            String result = scanner.next().toLowerCase();  //converting input in lowercase to less chance for getting an error
            switch (result) {
                case "hit":
                    System.out.println("Computer hit!");
                    gamePersonField[row][col] = 'X';
                    break;
                case "sunk":
                    System.out.println("Computer sunk your ship!");
                    gamePersonField[row][col] = 'X';
                    break;
                case "miss":
                    System.out.println("Computer missed!");
                    gamePersonField[row][col] = '*';
                    return;
                default:
                    System.out.println("Invalid input. Please enter 'miss', 'hit', or 'sunk'."); //runing Persons input again if the input smth other than miss/hit/sunk
            }
        }
    }
  }
  //this part checks if the input of coordinates is valid or if person has already shot in this cordinate before
  static boolean validShot(char[][] field, int row, int col) {
      return row >= 0 && row < FieldSize && col >= 0 && col < FieldSize && field[row][col] == '.';
  }
  //here checks after the first 'hit' the probable location of the ship, by returning the opposit of canPlaceShip
  static boolean ShipSunk(char[][] field, char[][] gameField, int row, int col) {
      return !canPlaceShip(field, row, col, 1, true);
  }
  //it simply counts 'X'/hits in the fields 
  static int countHits(char[][] field) {
      int count = 0; 
      for (char[] row : field) {
          for (char cell : row) {
              if (cell == 'X') count++;
          }
      }
      return count;
  }
} 

